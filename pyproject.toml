# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["nemo_automodel", "nemo_automodel.*"]

[tool.setuptools.dynamic]
version = { attr = "nemo_automodel.package_info.__version__" } # any module attribute compatible with ast.literal_eval
readme = { file = "README.md", content-type = "text/markdown" }

[project]
description = "NeMo Automodel - Provides Day-0 support for any Hugging Face model leveraging PyTorch native functionalities while providing performance and memory optimized training and inference recipes."
name = "nemo-automodel"
dynamic = ["version"]
readme = "README.md"
authors = [{ name = "NVIDIA", email = "nemo-toolkit@nvidia.com" }]
maintainers = [{ name = "NVIDIA", email = "nemo-toolkit@nvidia.com" }]
requires-python = ">=3.10"
classifiers = [
    # How mature is this project? Common values are
    #  1 - Planning
    #  2 - Pre-Alpha
    #  3 - Alpha
    #  4 - Beta
    #  5 - Production/Stable
    #  6 - Mature
    #  7 - Inactive
    'Development Status :: 4 - Beta',
    # Indicate who your project is intended for
    'Intended Audience :: Developers',
    'Intended Audience :: Science/Research',
    'Intended Audience :: Information Technology',
    # Indicate what your project relates to
    'Topic :: Scientific/Engineering',
    'Topic :: Scientific/Engineering :: Mathematics',
    'Topic :: Scientific/Engineering :: Image Recognition',
    'Topic :: Scientific/Engineering :: Artificial Intelligence',
    'Topic :: Software Development :: Libraries',
    'Topic :: Software Development :: Libraries :: Python Modules',
    'Topic :: Utilities',
    # Pick your license as you wish (should match "license" above)
    'License :: OSI Approved :: Apache Software License',
    # Supported python versions
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    # Additional Setting
    'Environment :: Console',
    'Natural Language :: English',
    'Operating System :: OS Independent',
]
dependencies = [
    "bitsandbytes==0.45.5; (platform_machine == 'x86_64' and platform_system != 'Darwin')",
    "cut-cross-entropy @ git+https://github.com/apple/ml-cross-entropy.git@87a86ab",
    "datasets",
    "liger-kernel==0.5.8; (platform_machine == 'x86_64' and platform_system != 'Darwin')",
    "pyyaml",
    "torch",
    "torchdata",
    "transformers",
    "wandb",
]

[project.optional-dependencies]
vlm = ["pillow", "qwen-vl-utils[decord]", "transformers==4.53.0","timm==1.0.16"]
fa = ["flash-attn"]

[project.urls]
Homepage = "https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/stable/"
Repository = "https://github.com/NVIDIA/NeMo-Automodel"
Download = "https://github.com/NVIDIA/NeMo-Automodel/releases"

[project.scripts]
automodel = "nemo_automodel._cli.app:main"

[dependency-groups]
build = ["setuptools", "torch"]
docs = [
    "sphinx",
    "sphinx-autobuild",    # For live doc serving while editing docs
    "sphinx-autodoc2",     # For documenting Python API
    "sphinx-copybutton",   # Adds a copy button for code blocks
    "myst_parser",         # For our markdown docs
    "nvidia-sphinx-theme", # Our NVIDIA theme
]
linting = [
    "pre-commit>=4.2.0",
    "ruff~=0.9.0",
]
test = ["coverage", "pytest", "peft"]
nvfsdp = ["nvfsdp"]

[tool.uv]
default-groups = ["build", "docs", "test", "nvfsdp"]
no-build-isolation-package = ["flash-attn"]

[tool.uv.sources]
nvfsdp = { git = "https://github.com/NVIDIA-NeMo/nvFSDP.git", rev = "48f131a0573742529d228f9d4ba668820910b001" }

[tool.coverage.paths]
source = [".", "/workspace", "/home/runner/work/Automodel/Automodel"]

[tool.coverage.run]
omit = [
    "nemo_automodel/components/checkpoint/_backports/*.py",
    "tests/*",
]

[tool.ruff]
line-length = 120
exclude = [
   "tests/",
]

[tool.ruff.format]
quote-style = "double"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
# Enable all `pydocstyle` rules, limiting to those that adhere to the
# Google convention via `convention = "google"`, below.
select = [
    "F541", # f-string without any placeholders
    "F841", # local variable assigned but never used
    "F401", # imported but unused
    "E741", # ambiguous variable name
    "F821", # undefined name
    "E266", # too many leading '#' for block comment
    "I",    # isort
    "D101", # docstring
    "D103",
]

ignore = [
    "E501", # Line too long - handled by formatter
    "D101",
    "D103",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

# Section to exclude errors for different file types
[tool.ruff.lint.per-file-ignores]
# Ignore all directories named `tests`.
"tests/**" = ["D"]
# Ignore all files that end in `_test.py`.
"*_test.py" = ["D"]
# Ignore F401 (import but unused) in __init__.py
"__init__.py" = ["F401"]


[tool.ruff.lint.isort]
known-third-party = ["datasets"]
